{"version":3,"sources":["components/repo.js","components/info.js","components/form.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Repo","props","className","role","href","html_url","target","rel","class","name","description","Info","login","public_repos","repos","map","repo","error","Form","onSubmit","getMethod","type","placeholder","Header","App","state","undefined","gettingInfo","e","a","preventDefault","user","elements","value","fetch","api_url","json","data","repos_url","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4PAgBeA,EAdF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,sBAAsBC,KAAK,SACxC,uBACEC,KAAMH,EAAMI,SACZC,OAAO,SACPC,IAAI,sBACJC,MAAM,cAELP,EAAMQ,MAET,2BAAIR,EAAMS,eCYCC,EArBF,SAAAV,GAAK,OAChB,6BACGA,EAAMW,OACL,6BACE,4CAAkBX,EAAMY,cACxB,2CAEE,uBAAGP,OAAO,SAASC,IAAI,sBAAsBH,KAAMH,EAAMI,UACtDJ,EAAMW,QAGX,wBAAIV,UAAU,eAAd,gBACCD,EAAMa,MAAMC,KAAI,SAAAC,GAAI,OACnB,kBAAC,EAAQA,OAIf,2BAAIf,EAAMgB,SCNCC,EAZF,SAAAjB,GAAK,OAChB,0BAAMkB,SAAUlB,EAAMmB,WACpB,2BACElB,UAAU,eACVmB,KAAK,OACLZ,KAAK,OACLa,YAAY,aAEd,4BAAQpB,UAAU,wBAAlB,qBCNWqB,EAFA,kBAAM,wBAAIrB,UAAU,eAAd,eCoDNsB,E,4MAhDbC,MAAQ,CACNb,WAAOc,EACPrB,cAAUqB,EACVb,kBAAca,EACdZ,WAAOY,EACPT,WAAOS,G,EAGTC,Y,uCAAc,WAAMC,GAAN,uBAAAC,EAAA,yDACZD,EAAEE,mBACIC,EAAOH,EAAEtB,OAAO0B,SAASD,KAAKE,OAFxB,iCAKYC,MAAM,gCAAD,OAAiCH,IALlD,cAKJI,EALI,gBAMSA,EAAQC,OANjB,cAMJC,EANI,iBAOcH,MAAM,gCAAD,OACKH,EADL,WAPnB,eAOJO,EAPI,iBAUUA,EAAUF,OAVpB,QAUJtB,EAVI,OAWV,EAAKyB,SAAS,CACZ3B,MAAOyB,EAAKzB,MACZP,SAAUgC,EAAKhC,SACfQ,aAAcwB,EAAKxB,aACnBC,MAAOA,EACPG,WAAOS,IAhBC,wBAmBV,EAAKa,SAAS,CACZ3B,WAAOc,EACPrB,cAAUqB,EACVb,kBAAca,EACdZ,WAAOY,EACPT,MAAO,mBAxBC,4C,6GA8BZ,OACE,yBAAKf,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMkB,UAAWoB,KAAKb,cACtB,kBAAC,EAASa,KAAKf,Y,GA3CLgB,IAAMC,W,MCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAM4C,a","file":"static/js/main.c0cdf5b5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Repo = props => (\r\n  <div className=\"alert alert-primary\" role=\"alert\">\r\n    <a\r\n      href={props.html_url}\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n      class=\"alert-link\"\r\n    >\r\n      {props.name}\r\n    </a>\r\n    <p>{props.description}</p>\r\n  </div>\r\n);\r\n\r\nexport default Repo;\r\n","import React from \"react\";\nimport Api from \"./repo\";\n\nconst Info = props => (\n  <div>\n    {props.login && (\n      <div>\n        <p>Repositories: {props.public_repos}</p>\n        <p>\n          Link to user:\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={props.html_url}>\n            {props.login}\n          </a>\n        </p>\n        <h1 className=\"text-center\">Repositories</h1>\n        {props.repos.map(repo => (\n          <Api {...repo} />\n        ))}\n      </div>\n    )}\n    <p>{props.error}</p>\n  </div>\n);\n\nexport default Info;\n","import React from \"react\";\n\nconst Form = props => (\n  <form onSubmit={props.getMethod}>\n    <input\n      className=\"form-control\"\n      type=\"text\"\n      name=\"user\"\n      placeholder=\"Username\"\n    />\n    <button className=\"mt-2 btn btn-primary\">Get information</button>\n  </form>\n);\n\nexport default Form;\n","import React from \"react\";\n\nconst Header = () => <h1 className=\"text-center\">GitHub API</h1>;\n\nexport default Header;\n","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Header from \"./components/header\";\n\nclass App extends React.Component {\n  state = {\n    login: undefined,\n    html_url: undefined,\n    public_repos: undefined,\n    repos: undefined,\n    error: undefined\n  };\n\n  gettingInfo = async e => {\n    e.preventDefault();\n    const user = e.target.elements.user.value;\n\n    if (user) {\n      const api_url = await fetch(`https://api.github.com/users/${user}`);\n      const data = await api_url.json();\n      const repos_url = await fetch(\n        `https://api.github.com/users/${user}/repos`\n      );\n      const repos = await repos_url.json();\n      this.setState({\n        login: data.login,\n        html_url: data.html_url,\n        public_repos: data.public_repos,\n        repos: repos,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        login: undefined,\n        html_url: undefined,\n        public_repos: undefined,\n        repos: undefined,\n        error: \"Enter username\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <Form getMethod={this.gettingInfo} />\n        <Info {...this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}